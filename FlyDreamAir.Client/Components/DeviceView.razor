@inject IJSRuntime JSRuntime

<PrerenderView>
    <Prerender>
        <DeviceViewCss>
            <Mobile>
                @Mobile
            </Mobile>
            <Desktop>
                @Desktop
            </Desktop>
        </DeviceViewCss>
    </Prerender>
    <Content>
        @if(_isMobile == false)
        {
            @Desktop
        }
        else
        {
            @Mobile
        }
    </Content>
</PrerenderView>

@code {
    [Parameter]
    public RenderFragment? Desktop { get; set; }

    [Parameter]
    public RenderFragment? Mobile { get; set; }

    [Parameter]
    public RenderFragment? Unknown { get; set; }

    private bool? _isMobile;
    private DotNetObjectReference<DeviceView>? _objRef;

    public DeviceView()
    {
        _objRef = DotNetObjectReference.Create(this);
    }

    protected override void OnInitialized()
    {
        if (JSRuntime is IJSInProcessRuntime InProcessRuntime)
        {
            _isMobile = InProcessRuntime.Invoke<bool>($"{nameof(DeviceView)}.IsMobile");
        }
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await TryJSInvokeVoidAsync($"{nameof(DeviceView)}.RegisterAsync", _objRef);
        await base.OnAfterRenderAsync(firstRender);
    }

    [JSInvokable]
    public virtual void OnChange(bool isMobile)
    {
        if (_isMobile != isMobile)
        {
            _isMobile = isMobile;
            StateHasChanged();
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_objRef != null)
        {
            await TryJSInvokeVoidAsync($"{nameof(DeviceView)}.Unregister", _objRef);
            _objRef.Dispose();
            _objRef = null;
        }
    }

    private async Task TryJSInvokeVoidAsync(string identifier, params object?[]? args)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync(identifier, args);
        }
        catch (InvalidOperationException)
        {
            // Ignore, static server rendering exceptions.
        }
    }
}
