@using FlyDreamAir.Data.Model
@inject IJSRuntime JSRuntime
@inject BookingsService BookingsService

@if (!IsComponent)
{
    <DeviceView>
        <Desktop>
            <style>
                .FlyDreamAir-LocationSelect {
                    min-width: 20vw;
                    max-width: 25vw;
                }

                .FlyDreamAir-DateSelect {
                    min-width: 20vw;
                    max-width: 25vw;
                }
            </style>
        </Desktop>
        <Mobile>
            <style>
                @@media only screen and (max-width: 768px) {
                    .FlyDreamAir-LocationSelect {
                        min-width: 40vw;
                        max-width: 45vw;
                    }

                    .FlyDreamAir-DateSelect {
                        min-width: 90vw;
                        max-width: 100vw;
                    }
                }
            </style>
        </Mobile>
    </DeviceView>
}

<MudHtmlForm Action="/Flights/Flights"
             Method="@HtmlFormMethod.Get"
             Context="form">
    @{
        RenderFragment<Airport> itemTemplate = (airport) =>
            @<MudText>
                <b>@airport.Id</b> - @airport.City, @airport.Country (@airport.Name)
            </MudText>;

        RenderFragment fromSelect =
            @<MudAutocomplete T="Airport"
                              @bind-Value="_fromAirport"
                              SearchFunc="(hint) => GetAirports(hint, _toAirport)"
                              ToStringFunc="(a) => a?.Id"
                              ShowProgressIndicator="true"
                              CoerceText="true"
                              Strict="false"
                              Label="From"
                              Required="true"
                              RequiredError="Please enter your departure location."
                              Adornment="@Adornment.Start"
                              AdornmentIcon="@Icons.Material.Outlined.PinDrop"
                              Variant="@Variant.Outlined"
                              Class="FlyDreamAir-LocationSelect"
                              UserAttributes="@(new(){ {"name", "from"} })">
                <ItemTemplate Context="airport">
                    @itemTemplate(airport)
                </ItemTemplate>
            </MudAutocomplete>;
        RenderFragment toSelect =
            @<MudAutocomplete T="Airport"
                              @bind-Value="_toAirport"
                              SearchFunc="(hint) => GetAirports(hint, _fromAirport)"
                              ToStringFunc="(a) => a?.Id"
                              ShowProgressIndicator="true"
                              CoerceText="true"
                              Strict="false"
                              Label="To"
                              Required="true"
                              RequiredError="Please enter your destination."
                              Adornment="@Adornment.Start"
                              AdornmentIcon="@Icons.Material.Outlined.AirplanemodeActive"
                              Variant="@Variant.Outlined"
                              Class="FlyDreamAir-LocationSelect"
                              UserAttributes="@(new(){ {"name", "to"} })">
                <ItemTemplate Context="airport">
                    @itemTemplate(airport)
                </ItemTemplate>
            </MudAutocomplete>;
        RenderFragment<bool> datePicker = (isMobile) =>
            @<MudDatePicker @bind-Date="_date"
                            Placeholder="Select date"
                            DateFormat="dd/MM/yyyy"
                            MinDate="DateTime.Today.AddDays(1)"
                            Adornment="@Adornment.Start"
                            AdornmentIcon="@Icons.Material.Outlined.CalendarToday"
                            Required="true"
                            RequiredError="Please enter your departure date."
                            Variant="@Variant.Outlined"
                            Class="FlyDreamAir-DateSelect"
                            PickerVariant="@(isMobile && !IsComponent ?
                                PickerVariant.Dialog : PickerVariant.Inline)"
                            TransformOrigin="@(isMobile ?
                                Origin.CenterLeft : Origin.TopLeft)" />;
        RenderFragment<MudHtmlForm> submitButton = (form) =>
            @<MudButton Variant="@Variant.Filled"
                                        Color="@Color.Primary"
                                        Size="@(IsComponent ? Size.Medium : Size.Large)"
                                        Style="border-radius: 100px;"
                                        OnClick="@form.Submit">
                Search
            </MudButton>;
    }

    @if (!IsComponent)
    {
        // Intended as the content for the home page.
        <MudStack>
            <DeviceView>
                <Desktop>
                    <MudStack Row="true" Justify="@Justify.SpaceEvenly"
                              Style="max-width: 75%; margin-left: auto; margin-right: auto;">
                        @fromSelect
                        @toSelect
                        @datePicker(false)
                    </MudStack>
                </Desktop>
                <Mobile>
                    <MudStack>
                        <MudStack Row="true">
                            @fromSelect
                            @toSelect
                        </MudStack>
                        @datePicker(true)
                    </MudStack>
                </Mobile>
            </DeviceView>
            <MudStack Row="true" Justify="@Justify.Center">
                @submitButton(form)
            </MudStack>
        </MudStack>
    }
    else
    {
        // Intended as a standalone component.
        <DeviceView>
            <Desktop>
                <style>
                    .FlyDreamAir-LocationSelect {
                        min-width: 10vw;
                        max-width: 25vw;
                    }

                    .FlyDreamAir-DateSelect {
                        min-width: 10vw;
                        max-width: 25vw;
                    }
                </style>
                <MudStack Row="true" Spacing="1">
                    @fromSelect
                    @toSelect
                    @datePicker(false)
                    <div></div>
                    <div></div>
                    @submitButton(form)
                </MudStack>
            </Desktop>
            <Mobile>
                <MudStack Spacing="1">
                    @fromSelect
                    @toSelect
                    @datePicker(true)
                    <div></div>
                    <div></div>
                    <div></div>
                    <div></div>
                    @submitButton(form)
                </MudStack>
            </Mobile>
        </DeviceView>
    }

    <!-- Shadow input element to convert to the correct format. -->
    <input name="date"
           value="@(_date?
                        .ToString("yyyy-MM-dd",
                            System.Globalization.CultureInfo.InvariantCulture))"
           hidden />
    <input name="returnDate"
           value="@(_returnDate?
                        .ToString("yyyy-MM-dd",
                            System.Globalization.CultureInfo.InvariantCulture))"
           hidden />
</MudHtmlForm>

@code {
    private List<Airport>? _airports = null;
    private Airport? _fromAirport;
    private Airport? _toAirport;
    private DateTime? _date;
    private DateTime? _returnDate;

    [Parameter]
    public bool IsComponent { get; set; } = true;

    [Parameter]
    public string? InitialFrom { get; init; }

    [Parameter]
    public string? InitialTo { get; init; }

    [Parameter]
    public DateTime? InitialDate { get; init; }

    [Parameter]
    public DateTime? InitialReturnDate { get; init; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_airports is null)
        {
            _airports = await BookingsService.GetAirportsAsync().ToListAsync();
            _fromAirport = _airports.SingleOrDefault(a => a.Id == InitialFrom);
            _toAirport = _airports.SingleOrDefault(a => a.Id == InitialTo);
            _date = InitialDate;
            _returnDate = InitialReturnDate;
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task<IEnumerable<Airport>> GetAirports(string? hint, Airport? exclude)
    {
        _airports ??= await BookingsService.GetAirportsAsync().ToListAsync();
        hint ??= "";

        return _airports.Where(a => a.Id != exclude?.Id)
            .Where(a =>
                a.Id.Equals(hint, StringComparison.InvariantCultureIgnoreCase)
                || a.City.Contains(hint, StringComparison.InvariantCultureIgnoreCase)
                || a.Country.Contains(hint, StringComparison.InvariantCultureIgnoreCase)
                || a.Name.Contains(hint, StringComparison.InvariantCultureIgnoreCase)
            );
    }
}
