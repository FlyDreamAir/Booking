@using FlyDreamAir.Data.Model

<MudStack Style="position: relative; width: 100%" AlignItems="@AlignItems.End">
    @if (Journey is null)
    {
        <MudText Align="@Align.Center" Style="position: absolute; width: 100%;">
            <b>Please select a flight.</b>
        </MudText>
    }

    <MudPaper Style="@("border-radius: 10px;"
                     + "background-color: var(--mud-palette-background-grey);"
                     + "padding: 1rem;"
                     +$"visibility: {(Journey is null ? "hidden" : "visible")};"
                     + "width: 100%;")">
        <MudStack Row="true"
                  AlignItems="@AlignItems.Start"
                  Justify="@Justify.SpaceBetween"
                  Spacing="1">
            <MudStack Row="true"
                      AlignItems="@AlignItems.Start"
                      Spacing="1">
                <MudImage Src="assets/logo_small.png" />
                <MudStack Spacing="1" AlignItems="@AlignItems.Start">
                    @if (Journey is not null)
                    {
                        for (int i = 0; i < Journey.Flights.Count; ++i)
                        {
                            var flight = Journey.Flights[i];
                            // Capture the current value for the children.
                            var currentFlightIndex = i;
                            <MudText Style="overflow: hidden; white-space: nowrap;">
                                @if (FlightIndex.HasValue && currentFlightIndex != FlightIndex)
                                {
                                    @flight.FlightId
                                }
                                else
                                {
                                    <b>@flight.FlightId</b>
                                }
                                (@flight.From.Id -> @flight.To.Id)
                            </MudText>
                        }
                    }
                </MudStack>
            </MudStack>
            <MudStack Spacing="1" AlignItems="@AlignItems.End" Style="overflow: hidden;">
                <MudText Style="white-space: nowrap;">
                    <b>@Journey?.From.Id</b>
                    ->
                    <b>@Journey?.To.Id</b>
                </MudText>
                <MudText Style="white-space: nowrap;">
                    @Journey?.GetDepartureTime().TimeOfDay.ToString("hh':'mm")
                    -
                    @Journey?.GetArrivalTime().TimeOfDay.ToString("hh':'mm")
                </MudText>
            </MudStack>
        </MudStack>
    </MudPaper>

    <style>
        .FlyDreamAir-SummaryView-Table td {
            text-align: right;
        }
        .FlyDreamAir-SummaryView-Table td:nth-child(2) {
            width: 4rem;
        }
    </style>

    <table style="@($"visibility: {(Journey is null ? "hidden" : "visible")};"
                  +  "width: 100%;")"
           class="FlyDreamAir-SummaryView-Table">
        <tbody>
            <tr>
                <td>
                    <MudText>
                        <b>Ticket</b>
                    </MudText>
                </td>
                <td>
                    <MudText>
                        <b>$@Journey?.BaseCost</b>
                    </MudText>
                </td>
            </tr>
            @if (AddOns is not null)
            {
                foreach (var addOn in AddOns)
                {
                    <tr>
                        <td>
                            <MudText>
                                <b>@addOn.Name</b>
                            </MudText>
                        </td>
                        <td>
                            <MudText>
                                <b>$@addOn.Price</b>
                            </MudText>
                        </td>
                    </tr>
                }
            }
            <tr>
                <td>
                    <MudText>
                        <b>Total</b>
                    </MudText>
                </td>
                <td>
                    <MudText>
                        <b>$@((Journey?.BaseCost ?? 0) + (AddOns?.Sum(a => a.Price) ?? 0))</b>
                    </MudText>
                </td>
            </tr>
        </tbody>
    </table>
</MudStack>

@code {
    [Parameter]
    public Journey? Journey { get; set; }

    [Parameter]
    public List<AddOn>? AddOns { get; set; }

    [Parameter]
    public int? FlightIndex { get; set; }
}
