@page "/Flights/Cancel"
@using FlyDreamAir.Data.Model
@inherits WizardPageBase
@inject BookingsService BookingsService

<PageTitle>Cancel your booking</PageTitle>

@{
    base.BuildRenderTree(__builder);
}

@code {
    private Booking? _booking;

    [SupplyParameterFromQuery]
    public required Guid BookingId { get; set; }

    [SupplyParameterFromQuery]
    public required Guid CancellationId { get; set; }

    private RenderFragment _Content(bool isMobile) =>
        @<MudStack Class="w-100 p-4" AlignItems="@AlignItems.Center">
            <MudText>
                Please click on "Next" if you have made this
                booking cancellation request to continue.<br />
                <b>This action cannot be undone.</b><br />
                You will be refunded shortly after confirmation.
            </MudText>
            @if (isMobile)
            {
                <SummaryView Journey="@Journey"
                             AddOns="@PreOrderedAddOns"
                             FlightIndex="@FlightIndex" />
            }
        </MudStack>;

    protected override bool EnableNextButton => true;

    protected override string FormAction => "/api/Bookings/CancelBooking";
    protected override HtmlFormMethod FormMethod => HtmlFormMethod.Post;
    protected override RenderFragment? FormAdditionalContent =>
        @<Wrapper>
            <input name="id" value="@BookingId" />
            <input name="cancellationId" value="@CancellationId" />
        </Wrapper>;

    protected override RenderFragment? MobileContent => _Content(true);
    protected override RenderFragment? DesktopContent => _Content(false);

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_booking is null)
        {
            FlightIndex = -1;
            _booking = await BookingsService.GetBookingAsync(BookingId);
            Journey = _booking.Journey;
            PreOrderedAddOns = _booking.AddOns;
            Flights = _booking.Journey.Flights.Concat(_booking.Journey.ReturnFlights).ToList();
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }
}
