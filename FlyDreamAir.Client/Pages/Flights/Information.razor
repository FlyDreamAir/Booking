@page "/Flights/Information"
@using System.ComponentModel.DataAnnotations
@using System.Globalization
@inherits WizardPageBase

<PageTitle>Information</PageTitle>

@{
    base.BuildRenderTree(__builder);
}

@code {
    private MudForm? _form;
    private bool _valid = false;

    [SupplyParameterFromQuery]
    public string? FirstName { get; set; }

    [SupplyParameterFromQuery]
    public string? LastName { get; set; }

    [SupplyParameterFromQuery]
    public string? Email { get; set; }

    [SupplyParameterFromQuery]
    public string? PassportId { get; set; }

    [SupplyParameterFromQuery]
    public DateTime? DateOfBirth { get; set; }

    private RenderFragment _Form(bool isMobile) =>
        @<MudForm @ref="_form" @bind-IsValid="@_valid"
                  Class="@($@"w-100 {(isMobile ? "p-4" : "px-4")}")">
            <MudStack>
                <MudTextField @bind-Value="@FirstName"
                          Label="First name"
                          Placeholder="John"
                          Required="true"
                          RequiredError="Please enter your first name."
                          Variant="@Variant.Outlined" />
                <MudTextField @bind-Value="@LastName"
                          Label="Last name"
                          Placeholder="Doe"
                          Required="true"
                          RequiredError="Please enter your last name."
                          Variant="@Variant.Outlined" />
                <MudTextField @bind-Value="@Email"
                          Label="Email"
                          Placeholder="someone@example.com"
                          Required="true"
                          RequiredError="Please enter your email."
                          Validation="@(new EmailAddressAttribute()
                          {
                              ErrorMessage = "Please enter a valid email address."
                          })"
                          Variant="@Variant.Outlined" />
                <MudTextField @bind-Value="@PassportId"
                          Label="Passport ID"
                          Placeholder="RA123456"
                          Required="true"
                          RequiredError="Please enter your passport ID."
                          Variant="@Variant.Outlined" />
                <MudDatePicker @bind-Date="@DateOfBirth"
                               Label="Date of birth"
                               Placeholder="dd/mm/yyyy"
                               DateFormat="dd/MM/yyyy"
                               MaxDate="@(DateTime.Today)"
                               Required="true"
                               RequiredError="Please enter your date of birth."
                               Variant="@Variant.Outlined"
                               PickerVariant="@(isMobile ?
                                   PickerVariant.Dialog : PickerVariant.Inline)"
                               TransformOrigin="@Origin.CenterLeft" />
            </MudStack>
        </MudForm>;

    protected override string? TitleOverride => IsMobile == false ?
        "Passenger information" : null;

    protected override RenderFragment DesktopContent =>
        _Form(false);

    protected override RenderFragment MobileContent =>
        _Form(true);

    protected override bool EnableNextButton => _valid;

    protected override string FormAction => "/api/Bookings/CreateBooking";

    protected override HtmlFormMethod FormMethod => HtmlFormMethod.Post;

    protected override RenderFragment FormAdditionalContent =>
        @<Wrapper>
            <input name="firstName" value="@FirstName" />
            <input name="lastName" value="@LastName" />
            <input name="email" value="@Email" />
            <input name="passportId" value="@PassportId" />
            <input name="dateOfBirth"
                   value="@(DateOfBirth?.ToString(CultureInfo.InvariantCulture.DateTimeFormat))"
                   hidden />
        </Wrapper>;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (_form is not null)
        {
            await _form.Validate();
        }
    }

    protected override async Task<bool> OnBeforeSubmitAsync()
    {
        if (_form is null)
        {
            return false;
        }
        await _form.Validate();
        return _form.IsValid;
    }
}
